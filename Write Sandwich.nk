set cut_paste_input [stack 0]
version 14.1 v4
push $cut_paste_input
Write {
 channels rgba
 file "\[value do_not_modify]"
 file_type mov
 mov64_format "mov (QuickTime / MOV)"
 mov64_codec appr
 mov_prores_codec_profile "ProRes 4:4:4:4 12-bit"
 mov_h264_codec_profile "High 4:2:0 8-bit"
 mov64_pixel_format {{0}}
 mov64_quality High
 mov64_fast_start true
 mov64_write_timecode true
 mov64_gop_size 12
 mov64_b_frames 0
 mov64_bitrate 20000
 mov64_bitrate_tolerance 4000000
 mov64_quality_min 1
 mov64_quality_max 3
 colorspace "Input - ARRI - V3 LogC (EI800) - Wide Gamut"
 create_directories true
 checkHashOnRead false
 version 36
 ocioColorspace scene_linear
 display ACES
 view "Arri Alexa"
 beforeRender "exec('import os, re\\n\\n# project file name\\nprojname = nuke.root()\[\\'name\\'].value()\\n\\n# get the current write node\\nthis_write = nuke.thisNode()\\n# get precomp task\\ntask_name = this_write\[\\'task\\'].value()\\n\\n# get write type selection\\nrenderType = this_write\[\\'render_type\\'].value()\\n\\n# make sure create directories is always checked\\nthis_write\[\\'create_directories\\'].setValue(1)\\n\\ndef precompPlateName():\\n    this_write\[\\'views\\'].setValue(\\'main\\')\\n    #project file directory\\n    projdir = os.path.dirname(projname)\\n\\n    # get name of top node with tcl\\n    topnode_name = nuke.tcl(\"full_name \[topnode %s]\" % this_write.name())\\n    # get actual top node with python\\n    topnode = nuke.toNode(topnode_name)\\n    # get file value of top node\\n    topnode_file = topnode\[\\'file\\'].value()\\n    topnode_base = os.path.basename(topnode_file)\\n\\n    # Regular expression to match the version pattern\\n    version_pattern = r\"v\\\\d+\"\\n\\n    # Search for the version pattern in the file path\\n    version_match = re.search(version_pattern, projname)\\n\\n    # Extract the version string if found\\n    proj_version = version_match.group(0) if version_match else \"No version found\"\\n\\n    # Replace \"project_files\" with \"renders\"\\n    renders_folder = projdir.replace(\"project_files\", \"renders\")\\n    renders_folder = renders_folder.replace(\"/Volumes/Macintosh HD\", \"\")\\n\\n    write_name = topnode_base.rsplit(\\'.\\', 1)\[0] + \\'_\\' + task_name + \\'_\\' + proj_version\\n\\n    full_write_path = f\\'\{renders_folder\}/precomps/\{write_name\}/\{write_name\}.####.exr\\'\\n\\n    # Set the path to the knob\\n    this_write\[\\'do_not_modify\\'].setValue(full_write_path)\\n\\n\\ndef precompCompName():\\n    this_write\[\\'views\\'].setValue(\\'main\\')\\n    render_path = projname.replace(\"project_files\", \"renders\")\\n    render_path = render_path.replace(\".nk\", \".####.exr\")\\n    render_path = render_path.replace(\"comp_v\", \"comp_\" + task_name + \"_v\")\\n    render_subfolder = os.path.splitext(os.path.splitext(os.path.basename(render_path))\[0])\[0]\\n    render_path = render_path.replace(\"/comp/\", \"/comp/precomps/\" + render_subfolder + \"/\")\\n    this_write\[\\'do_not_modify\\'].setValue(render_path)\\n\\n\\n\\ndef renderMain():\\n    render_path = projname.replace(\"project_files\", \"renders\")\\n    render_path = render_path.replace(\".nk\", \".mov\")\\n    this_write\[\\'do_not_modify\\'].setValue(render_path)\\n\\n\\ndef renderReview():\\n    render_path = projname.replace(\"project_files\", \"renders\")\\n    render_path = render_path.replace(\".nk\", \"_review.mov\")\\n    this_write\[\\'do_not_modify\\'].setValue(render_path)\\n\\n\\ndef renderSwitch():\\n    if renderType == \"main (final)\":\\n        renderMain()\\n    elif renderType == \"main (review)\":\\n        renderReview()\\n    elif renderType == \"precomp (plate name)\":\\n        precompPlateName()\\n    elif renderType == \"precomp (comp name)\":\\n        precompCompName()\\n    else:\\n        pass\\n\\nrenderSwitch()')"
 name Write_Sandwich
 label "\[value do_not_modify]"
 selected true
 xpos 470
 ypos 242
 addUserKnob {20 render_settings l "Render Settings"}
 addUserKnob {68 render_type l "Render Type" t "Use main for rendering the comp itself.\n\nUse precomp (plate name) if you want to precomp something like a denoise or undistort that should be named with the plate name (in case there are multiple plates)\n\nUse precomp (comp name) if you're precomping an element of the comp itself." M {"main (final)" "main (review)" "precomp (plate name)" "precomp (comp name)" "" "" ""}}
 addUserKnob {1 task l "Precomp Task"}
 task precomp
 addUserKnob {1 do_not_modify l "Generated File Path" t "do not modify"}
 addUserKnob {22 set_mov_final_defaults l "Set QT Final Defaults" T "this_write = nuke.thisNode()\nthis_write\['file_type'].setValue('mov')\nthis_write\['mov64_codec'].setValue('appr')\nthis_write\['mov64_format'].setValue('mov (QuickTime / MOV)')\nthis_write\['mov_prores_codec_profile'].setValue('ProRes 4:4:4:4 12-bit')\nthis_write\['transformType'].setValue('colorspace')" +STARTLINE}
 addUserKnob {22 set_mov_review_defaults l "Set QT Review Defaults" -STARTLINE T "this_write = nuke.thisNode()\nthis_write\['file_type'].setValue('mov')\nthis_write\['mov64_codec'].setValue('appr')\nthis_write\['mov64_format'].setValue('mov (QuickTime / MOV)')\nthis_write\['mov_prores_codec_profile'].setValue('ProRes 4:2:2 Proxy 10-bit')\nthis_write\['transformType'].setValue('display')"}
 addUserKnob {22 set_exr_defaults l "Set EXR Precomp Defaults" -STARTLINE T "this_write = nuke.thisNode()\nthis_write\['file_type'].setValue('exr')\nthis_write\['datatype'].setValue('16 bit half')\nthis_write\['compression'].setValue('none')\nthis_write\['transformType'].setValue('colorspace')"}
 addUserKnob {26 ""}
 addUserKnob {22 Render_1 l Render T nuke.thisNode().knob('Render').execute() +STARTLINE}
}
